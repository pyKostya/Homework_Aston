package com.pykost.lesson2;

import java.util.Comparator;

/**
 * Упорядоченная коллекция, в которой пользователь может контролировать в какое место списка
 * вставляется каждый элемент. Интерфейс CustomList предоставляет два метода вставки,
 * получения элемента по индексу, возможность удалять элемент из списка, а так же очищать полностью весь список.
 * Так же доступен метод для сортировки коллекции.
 *
 * @param <T> тип элементов в этом списке
 */

public interface CustomList<T> {

    /**
     * Добавляет element в конец этого списка.
     * Есть ограничения на то какие элементы могут быть добавлены в этот список.
     *
     * @param element элемент будет добавлен к этому списку
     * @return значение true, если этот список изменился в результате вызова
     * @throws UnsupportedOperationException если операция не поддерживается этим списком
     * @throws ClassCastException            если неправильное приведение между несвязанными классами
     * @throws NullPointerException          если указанный элемент равен null,
     *                                       а этот список не допускает нулевых элементов
     * @throws IllegalArgumentException      если какое-либо свойство этого элемента
     *                                       препятствует его добавлению в этот список
     */
    boolean add(T element);

    /**
     * Вставляет указанный элемент в указанную позицию в этом списке.
     * Сдвигает элемент, находящийся в данный момент в этой позиции и
     * все последующие элементы вправо (увеличивает их индексы на единицу).
     *
     * @param index   индекс, по которому должен быть вставлен указанный элемент
     * @param element элемент, который нужно вставить
     * @throws UnsupportedOperationException если операция не поддерживается этим списком
     * @throws ClassCastException            неправильное приведение между несвязанными классами
     * @throws NullPointerException          если указанный элемент равен null,
     *                                       а этот список не допускает нулевых элементов
     * @throws IllegalArgumentException      если какое-либо свойство этого элемента
     *                                       препятствует его добавлению в этот список
     * @throws IndexOutOfBoundsException     если индекс находится вне диапазона списка
     */
    void add(int index, T element);

    /**
     * Возвращает элемент в указанной позиции из этого списка
     *
     * @param index индекс возвращаемого элемента
     * @return элемент, находящийся в указанной позиции в этом списке
     * @throws IndexOutOfBoundsException если индекс находится вне диапазона списка
     */
    T get(int index);

    /**
     * Удаляет элемент указанной позиции в этом списке. Сдвигает все последующие элементы влево
     * (вычитает единицу из их индексов). Возвращает элемент, который был удалён из списка.
     *
     * @param index индекс элемента, подлежащего удалению из списка
     * @return элемент, ранее находившийся в указанной позиции
     * @throws UnsupportedOperationException если операция удаления не поддерживается этим списком
     * @throws IndexOutOfBoundsException     если индекс находится вне диапазона списка
     */
    T remove(int index);

    /**
     * Удаляет все элементы из этого списка.
     */
    void clear();

    /**
     * Сортирует этот список в соответствии с заданным порядком.
     *
     * @param comparator компаратор используемый для сравнения элементов списка
     * @throws UnsupportedOperationException если операция не поддерживается этим списком
     * @throws ClassCastException            неправильное приведение между несвязанными классами
     * @throws IllegalArgumentException      если какое-либо свойство этого элемента
     *                                       препятствует его добавлению в этот список
     */
    void sort(Comparator<? super T> comparator);

    /**
     * Возвращает количество элементов в списке.
     *
     * @return количество элементов в списке.
     */
    int size();

    /**
     * Заменяет элемент в указанной позиции на указанный элемент.
     *
     * @param index   индекс заменяемого элемента
     * @param element элемент, который должен быть сохранен в указанном положении
     * @return элемент, ранее находившийся в указанном положении
     * @throws UnsupportedOperationException если операция не поддерживается этим списком
     * @throws ClassCastException            неправильное приведение между несвязанными классами
     * @throws IllegalArgumentException      если какое-либо свойство этого элемента
     *                                       препятствует его добавлению в этот список
     * @throws IndexOutOfBoundsException     если индекс находится вне диапазона списка
     */
    T set(int index, T element);
}
